// Code generated by MockGen. DO NOT EDIT.
// Source: runner.go
//
// Generated by this command:
//
//	mockgen -typed -package mocks -source=runner.go -destination mocks/executor.go -exclude_interfaces Runner Executor
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockExecutor is a mock of Executor interface.
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
	isgomock struct{}
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor.
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance.
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// CombinedOutput mocks base method.
func (m *MockExecutor) CombinedOutput() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CombinedOutput")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CombinedOutput indicates an expected call of CombinedOutput.
func (mr *MockExecutorMockRecorder) CombinedOutput() *MockExecutorCombinedOutputCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CombinedOutput", reflect.TypeOf((*MockExecutor)(nil).CombinedOutput))
	return &MockExecutorCombinedOutputCall{Call: call}
}

// MockExecutorCombinedOutputCall wrap *gomock.Call
type MockExecutorCombinedOutputCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExecutorCombinedOutputCall) Return(arg0 []byte, arg1 error) *MockExecutorCombinedOutputCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExecutorCombinedOutputCall) Do(f func() ([]byte, error)) *MockExecutorCombinedOutputCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExecutorCombinedOutputCall) DoAndReturn(f func() ([]byte, error)) *MockExecutorCombinedOutputCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WasSuccess mocks base method.
func (m *MockExecutor) WasSuccess() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WasSuccess")
	ret0, _ := ret[0].(bool)
	return ret0
}

// WasSuccess indicates an expected call of WasSuccess.
func (mr *MockExecutorMockRecorder) WasSuccess() *MockExecutorWasSuccessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WasSuccess", reflect.TypeOf((*MockExecutor)(nil).WasSuccess))
	return &MockExecutorWasSuccessCall{Call: call}
}

// MockExecutorWasSuccessCall wrap *gomock.Call
type MockExecutorWasSuccessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExecutorWasSuccessCall) Return(arg0 bool) *MockExecutorWasSuccessCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExecutorWasSuccessCall) Do(f func() bool) *MockExecutorWasSuccessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExecutorWasSuccessCall) DoAndReturn(f func() bool) *MockExecutorWasSuccessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
