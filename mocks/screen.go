// Code generated by MockGen. DO NOT EDIT.
// Source: utils/screen.go
//
// Generated by this command:
//
//	mockgen -source=utils/screen.go -destination mocks/screen.go Screen
//

// Package mock_utils is a generated GoMock package.
package mock_main

import (
	reflect "reflect"

	utils "github.com/sgeisbacher/rwatch/utils"
	gomock "go.uber.org/mock/gomock"
)

// MockScreen is a mock of Screen interface.
type MockScreen struct {
	ctrl     *gomock.Controller
	recorder *MockScreenMockRecorder
	isgomock struct{}
}

// MockScreenMockRecorder is the mock recorder for MockScreen.
type MockScreenMockRecorder struct {
	mock *MockScreen
}

// NewMockScreen creates a new mock instance.
func NewMockScreen(ctrl *gomock.Controller) *MockScreen {
	mock := &MockScreen{ctrl: ctrl}
	mock.recorder = &MockScreenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScreen) EXPECT() *MockScreenMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockScreen) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init.
func (mr *MockScreenMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockScreen)(nil).Init))
}

// SetError mocks base method.
func (m *MockScreen) SetError(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetError", err)
}

// SetError indicates an expected call of SetError.
func (mr *MockScreenMockRecorder) SetError(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetError", reflect.TypeOf((*MockScreen)(nil).SetError), err)
}

// SetOutput mocks base method.
func (m *MockScreen) SetOutput(info utils.ExecutionInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOutput", info)
}

// SetOutput indicates an expected call of SetOutput.
func (mr *MockScreenMockRecorder) SetOutput(info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOutput", reflect.TypeOf((*MockScreen)(nil).SetOutput), info)
}
