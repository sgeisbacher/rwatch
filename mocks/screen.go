// Code generated by MockGen. DO NOT EDIT.
// Source: utils/screen.go
//
// Generated by this command:
//
//	mockgen -typed -package mocks -source=utils/screen.go -destination mocks/screen.go Screen
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	utils "github.com/sgeisbacher/rwatch/utils"
	gomock "go.uber.org/mock/gomock"
)

// MockScreen is a mock of Screen interface.
type MockScreen struct {
	ctrl     *gomock.Controller
	recorder *MockScreenMockRecorder
	isgomock struct{}
}

// MockScreenMockRecorder is the mock recorder for MockScreen.
type MockScreenMockRecorder struct {
	mock *MockScreen
}

// NewMockScreen creates a new mock instance.
func NewMockScreen(ctrl *gomock.Controller) *MockScreen {
	mock := &MockScreen{ctrl: ctrl}
	mock.recorder = &MockScreenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScreen) EXPECT() *MockScreenMockRecorder {
	return m.recorder
}

// InitScreen mocks base method.
func (m *MockScreen) InitScreen() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitScreen")
}

// InitScreen indicates an expected call of InitScreen.
func (mr *MockScreenMockRecorder) InitScreen() *MockScreenInitScreenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitScreen", reflect.TypeOf((*MockScreen)(nil).InitScreen))
	return &MockScreenInitScreenCall{Call: call}
}

// MockScreenInitScreenCall wrap *gomock.Call
type MockScreenInitScreenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScreenInitScreenCall) Return() *MockScreenInitScreenCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScreenInitScreenCall) Do(f func()) *MockScreenInitScreenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScreenInitScreenCall) DoAndReturn(f func()) *MockScreenInitScreenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetError mocks base method.
func (m *MockScreen) SetError(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetError", err)
}

// SetError indicates an expected call of SetError.
func (mr *MockScreenMockRecorder) SetError(err any) *MockScreenSetErrorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetError", reflect.TypeOf((*MockScreen)(nil).SetError), err)
	return &MockScreenSetErrorCall{Call: call}
}

// MockScreenSetErrorCall wrap *gomock.Call
type MockScreenSetErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScreenSetErrorCall) Return() *MockScreenSetErrorCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScreenSetErrorCall) Do(f func(error)) *MockScreenSetErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScreenSetErrorCall) DoAndReturn(f func(error)) *MockScreenSetErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetOutput mocks base method.
func (m *MockScreen) SetOutput(info utils.ExecutionInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOutput", info)
}

// SetOutput indicates an expected call of SetOutput.
func (mr *MockScreenMockRecorder) SetOutput(info any) *MockScreenSetOutputCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOutput", reflect.TypeOf((*MockScreen)(nil).SetOutput), info)
	return &MockScreenSetOutputCall{Call: call}
}

// MockScreenSetOutputCall wrap *gomock.Call
type MockScreenSetOutputCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScreenSetOutputCall) Return() *MockScreenSetOutputCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScreenSetOutputCall) Do(f func(utils.ExecutionInfo)) *MockScreenSetOutputCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScreenSetOutputCall) DoAndReturn(f func(utils.ExecutionInfo)) *MockScreenSetOutputCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
